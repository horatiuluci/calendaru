{"version":3,"sources":["./src/app/events/create-event-dialog/create-event-dialog.component.ts","./src/app/events/create-event-dialog/create-event-dialog.component.html","./src/app/events/events.page.ts","./src/app/events/events.page.html","./src/app/events/events-routing.module.ts","./src/app/events/events.module.ts","./src/app/events/events.service.ts"],"names":[],"mappings":"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","file":"events-events-module-es2015.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { EventsService } from '../events.service';\n\nexport interface CreateEvent {\n  title: string;\n  description: string;\n  startDate: Date;\n  endDate: Date;\n  allowedUsers: [];\n}\n\nexport interface AllowedUser {\n  username: string;\n  userToEvent: string;\n}\n\n@Component({\n  selector: 'app-create-event-dialog',\n  templateUrl: './create-event-dialog.component.html',\n  styleUrls: ['./create-event-dialog.component.css']\n})\nexport class CreateEventDialogComponent implements OnInit {\n\n  createEventForm: any;\n  otherAllowedUsers: AllowedUser[] = [];\n\n  constructor(\n    public dialogRef: MatDialogRef<CreateEventDialogComponent>,\n    private eventsService: EventsService,\n    private formBuilder: FormBuilder\n  ) {\n      this.createEventForm = this.formBuilder.group({\n        title: ['', Validators.required],\n        description: ['', Validators.required],\n        startDate: ['', Validators.required],\n        endDate: ['', Validators.required],\n        allowedUsers: [[]]\n      });\n\n  }\n\n  ngOnInit() { \n    this.getOtherUsers();\n  }\n\n  getOtherUsers() {\n    this.eventsService.getOtherUsersObservable()\n      .subscribe(\n        (data) => {\n          this.otherAllowedUsers = data as AllowedUser[];\n        }\n      );\n  }\n\n  createEvent() {\n    if (this.createEventForm.invalid) {\n      return;\n    }\n\n    let createdEvent = this.createEventForm.value as CreateEvent;\n    this.eventsService.createEventObservable(createdEvent)\n      .subscribe(\n        (data) => {\n          this.dialogRef.close();\n        }\n      )\n  }\n}\n","<form [formGroup]=\"createEventForm\" (ngSubmit)=\"createEvent()\" autocomplete=\"off\">\n\n    <mat-form-field>\n      <mat-label>Title</mat-label>\n      <input matInput formControlName=\"title\" id=\"title\" placeholder=\"Title\">\n      <mat-error *ngIf=\"createEventForm.get('title').touched && createEventForm.get('title').hasError('required')\">Required</mat-error>\n    </mat-form-field>\n\n    <mat-form-field>\n        <mat-label>Description</mat-label>\n        <input matInput formControlName=\"description\" id=\"description\" placeholder=\"Description\">\n        <mat-error *ngIf=\"createEventForm.get('description').touched && createEventForm.get('description').hasError('required')\">Required</mat-error>\n    </mat-form-field>\n\n    <mat-form-field>\n        <mat-label>Starting date</mat-label>\n        <input type=\"date\" matInput formControlName=\"startDate\" id=\"startDate\" placeholder=\"Starting date\">\n        <mat-error *ngIf=\"createEventForm.get('startDate').touched && createEventForm.get('startDate').hasError('required')\">Required</mat-error>\n    </mat-form-field>\n\n    <mat-form-field>\n        <mat-label>Ending date</mat-label>\n        <input type=\"date\" matInput formControlName=\"endDate\" id=\"endDate\" placeholder=\"Ending date\">\n        <mat-error *ngIf=\"createEventForm.get('endDate').touched && createEventForm.get('endDate').hasError('required')\">Required</mat-error>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"fill\">\n        <mat-label>Other allowed users</mat-label>\n        <mat-select [formControl]=\"createEventForm.controls.allowedUsers\" multiple>\n          <mat-option *ngFor=\"let user of otherAllowedUsers\" [value]=\"user.userToEvent\">{{user.username}}</mat-option>\n        </mat-select>\n    </mat-form-field>\n\n    <div style=\"text-align: center; margin-top: 10px\">\n      <button mat-flat-button color=\"primary\" type=\"submit\" [disabled]=\"createEventForm.invalid\">Create</button>\n    </div>\n\n</form>","import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { EventsService } from '../events/events.service';\nimport { AuthService } from '../auth/auth.service';\nimport { CreateEventDialogComponent } from './create-event-dialog/create-event-dialog.component';\n\nexport interface Event {\n  title: string;\n  description: string;\n  startDate: Date;\n  endDate: Date;\n  allowedUsers: number,\n}\n\n@Component({\n  selector: 'app-events',\n  templateUrl: './events.page.html',\n  styleUrls: ['./events.page.css']\n})\nexport class EventsPage implements OnInit {\n\n  dataSource: Event[];\n  displayedColumns = [\n    'nr',\n    'title',\n    'description',\n    'startDate',\n    'endDate',\n    'allowedUsers'\n  ];\n  isTableLoading = false;\n\n  constructor(\n    public dialog: MatDialog,\n    private authService: AuthService,\n    private eventsService: EventsService\n    ) { }\n\n  ngOnInit() {\n    this.getEvents();\n  }\n\n  getEvents() {\n    this.isTableLoading = true;\n    this.eventsService.getEventsObservable()\n      .subscribe(\n        (data) => {\n          if (data) {\n            let dataToArray: Event[] = [];\n            for (var key in data) {\n              dataToArray.push(data[key] as Event);\n            }\n            this.dataSource = dataToArray;\n            this.isTableLoading = false;\n          }\n        },\n        (error) => {\n          this.isTableLoading = false;\n          console.log(error);\n        }\n      );\n  }\n\n  logout() {\n    this.authService.logout();\n  }\n\n  openDialog() {\n    let dialogRef = this.dialog.open(CreateEventDialogComponent, {\n      width: '500px',\n      height: '460px'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      this.getEvents();\n    });\n  }\n}\n","<br><br><br><br><br><br><br>\n\n<mat-card class=\"my-card\">\n    <div style=\"text-align: center\">\n        Hello, you have been logged in securely.\n        <div style=\"margin-top: 10px;\">\n            <button mat-flat-button color=\"primary\" (click)=\"openDialog()\">Create event</button>\n            <button mat-flat-button color=\"warn\" style=\"margin-left: 10px;\" (click)=\"logout()\">Logout</button>\n        </div>\n        \n    </div>\n</mat-card>\n\n<mat-progress-bar *ngIf=\"isTableLoading\" mode=\"indeterminate\"\n    style=\"margin: auto; margin-top: 50px;\">\n</mat-progress-bar>\n\n<table mat-table [dataSource]=\"dataSource\" class=\"my-table mat-elevation-z8\">\n    <!-- Nr. Column -->\n    <ng-container matColumnDef=\"nr\">\n        <th mat-header-cell *matHeaderCellDef> # </th>\n        <td mat-cell *matCellDef=\"let element; let i = index;\"> {{i + 1}} </td>\n    </ng-container>\n\n    <!-- Title Column -->\n    <ng-container matColumnDef=\"title\">\n        <th mat-header-cell *matHeaderCellDef> Title </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.title}} </td>\n    </ng-container>\n\n    <!-- Description Column -->\n    <ng-container matColumnDef=\"description\">\n        <th mat-header-cell *matHeaderCellDef> Description </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.description}} </td>\n    </ng-container>\n\n    <!-- Starting date Column -->\n    <ng-container matColumnDef=\"startDate\">\n        <th mat-header-cell *matHeaderCellDef> Starting date </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.startDate | date}}</td>\n    </ng-container>\n\n    <!-- Ending date Column -->\n    <ng-container matColumnDef=\"endDate\">\n        <th mat-header-cell *matHeaderCellDef> Ending date </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.endDate | date}}</td>\n    </ng-container>\n\n    <!-- Allowed users Column -->\n    <ng-container matColumnDef=\"allowedUsers\">\n        <th mat-header-cell *matHeaderCellDef> Allowed users </th>\n        <td mat-cell *matCellDef=\"let element\"> \n            {{element.allowedUsers == 1 ? 'Only you': 'You and ' + (element.allowedUsers - 1) + ' others'}} \n        </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n</table>\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { EventsPage } from './events.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: EventsPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class EventsPageRoutingModule {}\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MaterialModule } from '../material.module';\n\nimport { EventsPageRoutingModule } from './events-routing.module';\nimport { EventsPage } from './events.page';\nimport { CreateEventDialogComponent } from './create-event-dialog/create-event-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MaterialModule,\n    EventsPageRoutingModule\n  ],\n  declarations: [EventsPage, CreateEventDialogComponent],\n  entryComponents: [\n    CreateEventDialogComponent\n  ],\n})\nexport class EventsPageModule { }\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from '../../environments/environment';\r\n\r\nimport { CreateEvent } from './create-event-dialog/create-event-dialog.component'\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EventsService {\r\nprivate _events: boolean = false;\r\n\r\n  get events() {\r\n    return this._events;\r\n  }\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n  ) { }\r\n\r\n  getOtherUsersObservable() {\r\n    return this.http.get<any>(environment.apiUrl + '/other-users');\r\n  }\r\n\r\n  getEventsObservable() {\r\n    return this.http.get<any>(environment.apiUrl + '/events');\r\n  }\r\n\r\n  createEventObservable(createEvent: CreateEvent) {\r\n    return this.http.post(environment.apiUrl + '/create-event', createEvent);\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}