{"version":3,"sources":["webpack:///src/app/events/create-event-dialog/create-event-dialog.component.ts","webpack:///src/app/events/create-event-dialog/create-event-dialog.component.html","webpack:///src/app/events/events.page.ts","webpack:///src/app/events/events.page.html","webpack:///src/app/events/events-routing.module.ts","webpack:///src/app/events/events.module.ts","webpack:///src/app/events/events.service.ts"],"names":["CreateEventDialogComponent","dialogRef","eventsService","formBuilder","otherAllowedUsers","createEventForm","group","title","required","description","startDate","endDate","allowedUsers","getOtherUsers","getOtherUsersObservable","subscribe","data","invalid","createdEvent","value","createEventObservable","close","createEvent","selector","templateUrl","styleUrls","EventsPage","dialog","authService","displayedColumns","isTableLoading","getEvents","getEventsObservable","dataToArray","key","push","dataSource","error","console","log","logout","open","width","height","afterClosed","result","openDialog","routes","path","component","EventsPageRoutingModule","forChild","imports","exports","EventsPageModule","declarations","entryComponents","EventsService","http","_events","get","apiUrl","post","providedIn"],"mappings":"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","file":"events-events-module-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { EventsService } from '../events.service';\n\nexport interface CreateEvent {\n  title: string;\n  description: string;\n  startDate: Date;\n  endDate: Date;\n  allowedUsers: [];\n}\n\nexport interface AllowedUser {\n  username: string;\n  userToEvent: string;\n}\n\n@Component({\n  selector: 'app-create-event-dialog',\n  templateUrl: './create-event-dialog.component.html',\n  styleUrls: ['./create-event-dialog.component.css']\n})\nexport class CreateEventDialogComponent implements OnInit {\n\n  createEventForm: any;\n  otherAllowedUsers: AllowedUser[] = [];\n\n  constructor(\n    public dialogRef: MatDialogRef<CreateEventDialogComponent>,\n    private eventsService: EventsService,\n    private formBuilder: FormBuilder\n  ) {\n      this.createEventForm = this.formBuilder.group({\n        title: ['', Validators.required],\n        description: ['', Validators.required],\n        startDate: ['', Validators.required],\n        endDate: ['', Validators.required],\n        allowedUsers: [[]]\n      });\n\n  }\n\n  ngOnInit() { \n    this.getOtherUsers();\n  }\n\n  getOtherUsers() {\n    this.eventsService.getOtherUsersObservable()\n      .subscribe(\n        (data) => {\n          this.otherAllowedUsers = data as AllowedUser[];\n        }\n      );\n  }\n\n  createEvent() {\n    if (this.createEventForm.invalid) {\n      return;\n    }\n\n    let createdEvent = this.createEventForm.value as CreateEvent;\n    this.eventsService.createEventObservable(createdEvent)\n      .subscribe(\n        (data) => {\n          this.dialogRef.close();\n        }\n      )\n  }\n}\n","<form [formGroup]=\"createEventForm\" (ngSubmit)=\"createEvent()\" autocomplete=\"off\">\n\n    <mat-form-field>\n      <mat-label>Title</mat-label>\n      <input matInput formControlName=\"title\" id=\"title\" placeholder=\"Title\">\n      <mat-error *ngIf=\"createEventForm.get('title').touched && createEventForm.get('title').hasError('required')\">Required</mat-error>\n    </mat-form-field>\n\n    <mat-form-field>\n        <mat-label>Description</mat-label>\n        <input matInput formControlName=\"description\" id=\"description\" placeholder=\"Description\">\n        <mat-error *ngIf=\"createEventForm.get('description').touched && createEventForm.get('description').hasError('required')\">Required</mat-error>\n    </mat-form-field>\n\n    <mat-form-field>\n        <mat-label>Starting date</mat-label>\n        <input type=\"date\" matInput formControlName=\"startDate\" id=\"startDate\" placeholder=\"Starting date\">\n        <mat-error *ngIf=\"createEventForm.get('startDate').touched && createEventForm.get('startDate').hasError('required')\">Required</mat-error>\n    </mat-form-field>\n\n    <mat-form-field>\n        <mat-label>Ending date</mat-label>\n        <input type=\"date\" matInput formControlName=\"endDate\" id=\"endDate\" placeholder=\"Ending date\">\n        <mat-error *ngIf=\"createEventForm.get('endDate').touched && createEventForm.get('endDate').hasError('required')\">Required</mat-error>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"fill\">\n        <mat-label>Other allowed users</mat-label>\n        <mat-select [formControl]=\"createEventForm.controls.allowedUsers\" multiple>\n          <mat-option *ngFor=\"let user of otherAllowedUsers\" [value]=\"user.userToEvent\">{{user.username}}</mat-option>\n        </mat-select>\n    </mat-form-field>\n\n    <div style=\"text-align: center; margin-top: 10px\">\n      <button mat-flat-button color=\"primary\" type=\"submit\" [disabled]=\"createEventForm.invalid\">Create</button>\n    </div>\n\n</form>","import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { EventsService } from '../events/events.service';\nimport { AuthService } from '../auth/auth.service';\nimport { CreateEventDialogComponent } from './create-event-dialog/create-event-dialog.component';\n\nexport interface Event {\n  title: string;\n  description: string;\n  startDate: Date;\n  endDate: Date;\n  allowedUsers: number,\n}\n\n@Component({\n  selector: 'app-events',\n  templateUrl: './events.page.html',\n  styleUrls: ['./events.page.css']\n})\nexport class EventsPage implements OnInit {\n\n  dataSource: Event[];\n  displayedColumns = [\n    'nr',\n    'title',\n    'description',\n    'startDate',\n    'endDate',\n    'allowedUsers'\n  ];\n  isTableLoading = false;\n\n  constructor(\n    public dialog: MatDialog,\n    private authService: AuthService,\n    private eventsService: EventsService\n    ) { }\n\n  ngOnInit() {\n    this.getEvents();\n  }\n\n  getEvents() {\n    this.isTableLoading = true;\n    this.eventsService.getEventsObservable()\n      .subscribe(\n        (data) => {\n          if (data) {\n            let dataToArray: Event[] = [];\n            for (var key in data) {\n              dataToArray.push(data[key] as Event);\n            }\n            this.dataSource = dataToArray;\n            this.isTableLoading = false;\n          }\n        },\n        (error) => {\n          this.isTableLoading = false;\n          console.log(error);\n        }\n      );\n  }\n\n  logout() {\n    this.authService.logout();\n  }\n\n  openDialog() {\n    let dialogRef = this.dialog.open(CreateEventDialogComponent, {\n      width: '500px',\n      height: '460px'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      this.getEvents();\n    });\n  }\n}\n","<br><br><br><br><br><br><br>\n\n<mat-card class=\"my-card\">\n    <div style=\"text-align: center\">\n        Hello, you have been logged in securely.\n        <div style=\"margin-top: 10px;\">\n            <button mat-flat-button color=\"primary\" (click)=\"openDialog()\">Create event</button>\n            <button mat-flat-button color=\"warn\" style=\"margin-left: 10px;\" (click)=\"logout()\">Logout</button>\n        </div>\n        \n    </div>\n</mat-card>\n\n<mat-progress-bar *ngIf=\"isTableLoading\" mode=\"indeterminate\"\n    style=\"margin: auto; margin-top: 50px;\">\n</mat-progress-bar>\n\n<table mat-table [dataSource]=\"dataSource\" class=\"my-table mat-elevation-z8\">\n    <!-- Nr. Column -->\n    <ng-container matColumnDef=\"nr\">\n        <th mat-header-cell *matHeaderCellDef> # </th>\n        <td mat-cell *matCellDef=\"let element; let i = index;\"> {{i + 1}} </td>\n    </ng-container>\n\n    <!-- Title Column -->\n    <ng-container matColumnDef=\"title\">\n        <th mat-header-cell *matHeaderCellDef> Title </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.title}} </td>\n    </ng-container>\n\n    <!-- Description Column -->\n    <ng-container matColumnDef=\"description\">\n        <th mat-header-cell *matHeaderCellDef> Description </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.description}} </td>\n    </ng-container>\n\n    <!-- Starting date Column -->\n    <ng-container matColumnDef=\"startDate\">\n        <th mat-header-cell *matHeaderCellDef> Starting date </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.startDate | date}}</td>\n    </ng-container>\n\n    <!-- Ending date Column -->\n    <ng-container matColumnDef=\"endDate\">\n        <th mat-header-cell *matHeaderCellDef> Ending date </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.endDate | date}}</td>\n    </ng-container>\n\n    <!-- Allowed users Column -->\n    <ng-container matColumnDef=\"allowedUsers\">\n        <th mat-header-cell *matHeaderCellDef> Allowed users </th>\n        <td mat-cell *matCellDef=\"let element\"> \n            {{element.allowedUsers == 1 ? 'Only you': 'You and ' + (element.allowedUsers - 1) + ' others'}} \n        </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n</table>\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { EventsPage } from './events.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: EventsPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class EventsPageRoutingModule {}\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MaterialModule } from '../material.module';\n\nimport { EventsPageRoutingModule } from './events-routing.module';\nimport { EventsPage } from './events.page';\nimport { CreateEventDialogComponent } from './create-event-dialog/create-event-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MaterialModule,\n    EventsPageRoutingModule\n  ],\n  declarations: [EventsPage, CreateEventDialogComponent],\n  entryComponents: [\n    CreateEventDialogComponent\n  ],\n})\nexport class EventsPageModule { }\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from '../../environments/environment';\r\n\r\nimport { CreateEvent } from './create-event-dialog/create-event-dialog.component'\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EventsService {\r\nprivate _events: boolean = false;\r\n\r\n  get events() {\r\n    return this._events;\r\n  }\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n  ) { }\r\n\r\n  getOtherUsersObservable() {\r\n    return this.http.get<any>(environment.apiUrl + '/other-users');\r\n  }\r\n\r\n  getEventsObservable() {\r\n    return this.http.get<any>(environment.apiUrl + '/events');\r\n  }\r\n\r\n  createEventObservable(createEvent: CreateEvent) {\r\n    return this.http.post(environment.apiUrl + '/create-event', createEvent);\r\n  }\r\n}\r\n"]}